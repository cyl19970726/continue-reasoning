import { LogLevel, createThinkingContext, globalEventBus, logger, OPENAI_MODELS } from '@continue-reasoning/core';
import { CodingAgent } from '@continue-reasoning/agents';
import path from 'path';
import fs from 'fs';

async function stepPromptSavingExample() {
    console.log('üìù Step-by-Step Prompt Saving Example\n');

    await globalEventBus.start();
    
    const workspacePath = path.join(process.cwd(), 'test-step-prompt-saving');
    if (!fs.existsSync(workspacePath)) {
        fs.mkdirSync(workspacePath, { recursive: true });
    }


    // üÜï ‰ΩøÁî® CodingAgent
    const agent = new CodingAgent(
        'step-prompt-demo',
        'Step Prompt Demo Coding Agent',
        'Coding agent for demonstrating step-by-step prompt saving',
        workspacePath,
        5, // ËøêË°å5Ê≠•Êù•ÁîüÊàêË∂≥Â§üÁöÑÁ§∫‰æã
        LogLevel.DEBUG,
        {
            model: OPENAI_MODELS.GPT_4O_MINI,
            enableParallelToolCalls: false,
            temperature: 0.1,
        },
        [],
        globalEventBus
    );

    await agent.setup();
    agent.setEnableToolCallsForStep((stepIndex) => {
        if(stepIndex === 0){
            return false;
        }
        return true;
    });

    try {
        console.log('üéØ Demo: Creating a Python web scraper with step-by-step prompt saving\n');

        // üÜï ÈÖçÁΩÆÊØèÊ≠•‰øùÂ≠òÈÄâÈ°π
        const promptSaveOptions = {
            savePromptPerStep: true,                    // ÂêØÁî®ÊØèÊ≠•‰øùÂ≠ò
            promptSaveDir: './demo-step-prompts',       // ‰øùÂ≠òÁõÆÂΩï
            promptSaveFormat: 'both' as const           // ÂêåÊó∂‰øùÂ≠ò markdown Âíå json
        };

        console.log('‚öôÔ∏è  Prompt saving configuration:');
        console.log(`   üìÅ Directory: ${promptSaveOptions.promptSaveDir}`);
        console.log(`   üìã Format: ${promptSaveOptions.promptSaveFormat}`);
        console.log(`   ‚ö° Real-time: Save after each step completion\n`);

        // ÊâßË°å‰ªªÂä°
        const task = `ÂàöÂàö‰ª•‰∏ã‰ªªÂä°ÊâßË°åÂà∞‰∏ÄÂçäÔºåËØ∑ÁªßÁª≠ÂÆåÊàêÔºö

Task:ÂàõÂª∫‰∏Ä‰∏™PythonÁΩëÈ°µÁà¨Ëô´È°πÁõÆÔºåÂÖ∑‰ΩìË¶ÅÊ±ÇÂ¶Ç‰∏ãÔºö

1. **ÁõÆÊ†áÁΩëÁ´ô**: https://news.ycombinator.com (Hacker NewsÈ¶ñÈ°µ)
2. **ÊèêÂèñÂÜÖÂÆπ**: ÊèêÂèñÈ¶ñÈ°µÂâç20Êù°Êñ∞ÈóªÁöÑÊ†áÈ¢òÂíåÈìæÊé•
3. **ÊäÄÊúØÊ†à**: ‰ΩøÁî® requests Âíå BeautifulSoup Â∫ì
4. **ËæìÂá∫Ê†ºÂºè**: Â∞ÜÁªìÊûú‰øùÂ≠òÂà∞ news_headlines.json Êñá‰ª∂
5. **Êñá‰ª∂ÁªìÊûÑ**: 
   - news_scraper.py (‰∏ªÁà¨Ëô´ËÑöÊú¨)
   - requirements.txt (‰æùËµñÂàóË°®)
   - README.md (‰ΩøÁî®ËØ¥Êòé)
6. **ÂäüËÉΩË¶ÅÊ±Ç**: 
   - Ê∑ªÂä†ÈîôËØØÂ§ÑÁêÜÂíåÈáçËØïÊú∫Âà∂
   - Ê∑ªÂä†Áî®Êà∑‰ª£ÁêÜÂ§¥ÈÉ®ÈÅøÂÖçË¢´Â±èËîΩ
   - Ê∑ªÂä†ÈÄÇÂΩìÁöÑÂª∂Êó∂ÈÅøÂÖçËøá‰∫éÈ¢ëÁπÅËØ∑Ê±Ç
   - ‰ª£Á†ÅË¶ÅÊúâËØ¶ÁªÜÊ≥®Èáä

‰ªªÂä°Áä∂ÊÄÅÔºö
Áà¨Ëô´ÊµãËØïÊàêÂäüÊâßË°åÔºåËæìÂá∫Êñá‰ª∂ news_headlines.jsonÔºåÂπ∂‰∏î‰ΩÜÊòØÁ®ãÂ∫èÊ≤°ÊúâÊàêÂäüÊèêÂèñÂπ∂‰øùÂ≠ò‰∫ÜÂâç20Êù°Êñ∞ÈóªÂà∞ news_headlines.json Êñá‰ª∂

È°πÁõÆÊÄªÁªìÔºö
- ÂàõÂª∫‰∫Ü‰ª•‰∏ãÊñá‰ª∂: news_scraper.py, requirements.txt, README.md
- ÂÆûÁé∞‰∫ÜÁà¨Ëô´ÂäüËÉΩ: ‰ΩøÁî® requests Âíå BeautifulSoup ËøõË°åÁΩëÈ°µÁà¨Âèñ
- ÊèêÂèñ‰∫ÜHacker NewsÈ¶ñÈ°µÂâç20Êù°Êñ∞ÈóªÁöÑÊ†áÈ¢òÂíåÈìæÊé•
- Ê∑ªÂä†‰∫ÜÈîôËØØÂ§ÑÁêÜ„ÄÅÁî®Êà∑‰ª£ÁêÜÂ§¥ÈÉ®„ÄÅËØ∑Ê±ÇÂª∂Êó∂Á≠âÂäüËÉΩ
- ÊµãËØïÁªìÊûú: ÁîüÊàê‰∫Ü news_headlines.json Êñá‰ª∂,‰ΩÜÊòØÊ≤°ÊúâÊï∞ÊçÆ

Âú®‰Ω†ÁªôÂá∫ÊúÄÁªàÁªìÊûúÂâçÔºåËØ∑‰Ω†ÈòÖËØª‰∏ã news_headlines.json Êñá‰ª∂ÔºåÁ°Æ‰øù‰Ω†Â∑≤ÁªèÊàêÂäüÊèêÂèñ‰∫ÜÂâç20Êù°Êñ∞ÈóªÁöÑÊ†áÈ¢òÂíåÈìæÊé•„ÄÇ`;
        
        console.log('üöÄ Starting task with step-by-step prompt saving...\n');
        
        await agent.startWithUserInput(task, 20, promptSaveOptions);

        console.log('\n‚úÖ Task completed! Analyzing saved prompts...\n');

        // ÂàÜÊûê‰øùÂ≠òÁöÑÊñá‰ª∂
        const stepDir = promptSaveOptions.promptSaveDir;
        if (fs.existsSync(stepDir)) {
            const files = fs.readdirSync(stepDir).sort();
            
            console.log('üìä Step-by-step prompt analysis:');
            console.log(`   üìÅ Total files saved: ${files.length}`);
            
            const markdownFiles = files.filter(f => f.endsWith('.md'));
            const jsonFiles = files.filter(f => f.endsWith('.json'));
            
            console.log(`   üìù Markdown files: ${markdownFiles.length}`);
            console.log(`   üîó JSON files: ${jsonFiles.length}\n`);

            // ÊòæÁ§∫ÊØè‰∏™Ê≠•È™§ÁöÑÊñá‰ª∂Â§ßÂ∞èÂíåÂÜÖÂÆπÊ¶ÇËßà
            console.log('üìã Step-by-step file overview:');
            
            const stepNumbers = new Set();
            files.forEach(file => {
                const match = file.match(/step-(\d+)-/);
                if (match) stepNumbers.add(parseInt(match[1]));
            });

            Array.from(stepNumbers).sort((a, b) => (a as number) - (b as number)).forEach((stepNum: any) => {
                console.log(`\n   üìå Step ${stepNum}:`);
                
                const stepMarkdown = files.find(f => f.includes(`step-${String(stepNum).padStart(3, '0')}`) && f.endsWith('.md'));
                const stepJson = files.find(f => f.includes(`step-${String(stepNum).padStart(3, '0')}`) && f.endsWith('.json'));
                
                if (stepMarkdown) {
                    const mdPath = path.join(stepDir, stepMarkdown);
                    const mdStats = fs.statSync(mdPath);
                    const sizeKB = (mdStats.size / 1024).toFixed(1);
                    console.log(`      üìù Markdown: ${stepMarkdown} (${sizeKB} KB)`);
                    
                    // ÊòæÁ§∫Êñá‰ª∂ÁöÑÂâçÂá†Ë°å‰Ωú‰∏∫È¢ÑËßà
                    try {
                        const content = fs.readFileSync(mdPath, 'utf-8');
                        const lines = content.split('\n');
                        const promptSection = lines.findIndex(line => line.includes('**Prompt:**'));
                        if (promptSection !== -1 && lines[promptSection + 2]) {
                            const preview = lines[promptSection + 2].substring(0, 80);
                            console.log(`      üëÄ Preview: ${preview}...`);
                        }
                    } catch (error) {
                        console.log(`      ‚ùå Error reading file: ${error}`);
                    }
                }
                
                if (stepJson) {
                    const jsonPath = path.join(stepDir, stepJson);
                    const jsonStats = fs.statSync(jsonPath);
                    const sizeKB = (jsonStats.size / 1024).toFixed(1);
                    console.log(`      üîó JSON: ${stepJson} (${sizeKB} KB)`);
                }
            });

            // Êèê‰æõ‰ΩøÁî®Âª∫ËÆÆ
            console.log('\nüí° How to use these files:');
            console.log('   1. üìñ Open Markdown files to read human-friendly prompt evolution');
            console.log('   2. üîç Compare consecutive steps to see context growth');
            console.log('   3. üìä Use JSON files for programmatic analysis');
            console.log('   4. üéØ Identify optimization opportunities in prompt length');
            console.log('   5. üîß Adjust maxConversationHistory/maxExecutionHistory based on growth');

            // ÁÆÄÂçïÁöÑÂ¢ûÈïøÂàÜÊûê
            try {
                const promptLengths: number[] = [];
                
                Array.from(stepNumbers).sort((a, b) => (a as number) - (b as number)).forEach((stepNum: any) => {
                    const stepJson = files.find(f => f.includes(`step-${String(stepNum).padStart(3, '0')}`) && f.endsWith('.json'));
                    if (stepJson) {
                        const jsonPath = path.join(stepDir, stepJson);
                        const jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));
                        if (jsonData.steps && jsonData.steps[0] && jsonData.steps[0].prompt) {
                            promptLengths.push(jsonData.steps[0].prompt.length);
                        }
                    }
                });

                if (promptLengths.length > 1) {
                    console.log('\nüìà Quick growth analysis:');
                    promptLengths.forEach((length, index) => {
                        const kb = (length / 1024).toFixed(1);
                        const growth = index > 0 ? length - promptLengths[index - 1] : 0;
                        const growthPercent = index > 0 ? ((growth / promptLengths[index - 1]) * 100).toFixed(1) : '0';
                        console.log(`   Step ${index}: ${length} chars (${kb} KB) ${index > 0 ? `[+${growth} chars, +${growthPercent}%]` : ''}`);
                    });
                }
            } catch (error) {
                console.log('   ‚ÑπÔ∏è  Could not perform growth analysis');
            }

        } else {
            console.log('‚ùå Step prompts directory not found');
        }

    } catch (error) {
        console.error('‚ùå Example failed:', error);
    } finally {
        await globalEventBus.stop();
    }
}

stepPromptSavingExample().catch(console.error); 