import { 
    AgentFactory, 
    AgentMode, 
    type AgentFactoryConfig,
    StreamAgent,
    AsyncAgent,
    SessionManager,
    EventBus,
    LogLevel
} from '../packages/core/index.js';
import { StandardPromptProcessor } from '../packages/core/prompts/index.js';

/**
 * ‰∫ã‰ª∂È©±Âä®Êû∂ÊûÑ‰ΩøÁî®Á§∫‰æã
 * Â±ïÁ§∫Â¶Ç‰Ωï‰ΩøÁî®AgentFactoryÂàõÂª∫ÂíåÁÆ°ÁêÜ‰∫ã‰ª∂È©±Âä®ÁöÑAgent
 */
async function demonstrateEventDrivenArchitecture() {
    console.log('üöÄ Event-Driven Architecture Demo');
    
    // 1. ÂàõÂª∫‰∫ã‰ª∂ÊÄªÁ∫ø
    const eventBus = new EventBus();
    console.log('‚úÖ Created EventBus');
    
    // 2. ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨ÔºàÊºîÁ§∫‰∫ã‰ª∂Á≥ªÁªüÔºâ
    setupEventListeners(eventBus);
    
    // 3. Ê®°ÊãüLLMÔºàÊîØÊåÅ‰∏§ÁßçË∞ÉÁî®Ê®°ÂºèÔºâ
    const mockLLM = createMockLLM();
    
    // 4. Ê£ÄÊü•LLMËÉΩÂäõ
    const capabilities = AgentFactory.checkLLMCapabilities(mockLLM);
    console.log('üîç LLM Capabilities:', capabilities);
    
    // 5. ÂàõÂª∫PromptProcessor
    const promptProcessor = new StandardPromptProcessor('coding-assistant');
    
    // 6. ÂàõÂª∫AgentÈÖçÁΩÆ
    const agentConfig: AgentFactoryConfig = {
        id: 'demo-agent-v2',
        name: 'Demo Agent V2',
        description: 'Event-driven demo agent',
        maxSteps: 3,
        promptProcessor,
        logLevel: LogLevel.INFO,
        agentOptions: {
            model: 'gpt-4o' as any,
            enableParallelToolCalls: true,
            temperature: 0.7
        },
        contexts: [],
        llm: mockLLM,
        eventBus
    };
    
    // 7. ÊºîÁ§∫‰∏çÂêåÁöÑAgentÂàõÂª∫ÊñπÂºè
    await demonstrateAgentCreation(agentConfig);
    
    // 8. ÊºîÁ§∫SessionManager V2
    await demonstrateSessionManagerV2(agentConfig, eventBus);
    
    console.log('‚ú® V2 Architecture Demo Complete!');
}

/**
 * ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
 */
function setupEventListeners(eventBus: EventBus) {
    console.log('üì° Setting up event listeners...');
    
    // ÁõëÂê¨‰ºöËØù‰∫ã‰ª∂
    eventBus.subscribe(['session.started', 'session.ended'], (event) => {
        console.log(`üîÑ Session Event: ${event.type} - ${event.sessionId}`);
    });
    
    // ÁõëÂê¨AgentÊ≠•È™§‰∫ã‰ª∂
    eventBus.subscribe(['agent.step.started', 'agent.step.completed', 'agent.step.failed'], (event) => {
        console.log(`ü§ñ Agent Event: ${event.type} - Step ${event.stepIndex}`);
    });
    
    // ÁõëÂê¨LLM‰∫ã‰ª∂
    eventBus.subscribe([
        'llm.call.started', 
        'llm.call.completed', 
        'llm.text.delta', 
        'llm.text.completed'
    ], (event) => {
        console.log(`üß† LLM Event: ${event.type} - Step ${event.stepIndex}`);
    });
    
    // ÁõëÂê¨Â∑•ÂÖ∑ÊâßË°å‰∫ã‰ª∂
    eventBus.subscribe([
        'tool.execution.started', 
        'tool.execution.completed', 
        'tool.execution.failed'
    ], (event) => {
        console.log(`üîß Tool Event: ${event.type} - Step ${event.stepIndex}`);
    });
    
    // ÁõëÂê¨ÈîôËØØ‰∫ã‰ª∂
    eventBus.subscribe('error.occurred', (event) => {
        if (event.data && 'error' in event.data) {
            console.log(`‚ùå Error Event: ${event.data.error}`);
        }
    });
}

/**
 * ÊºîÁ§∫AgentÂàõÂª∫ÁöÑ‰∏çÂêåÊñπÂºè
 */
async function demonstrateAgentCreation(config: AgentFactoryConfig) {
    console.log('\nüì¶ Demonstrating Agent Creation...');
    
    try {
        // 1. Ëá™Âä®Ê®°ÂºèÔºàÊé®ËçêÔºâ
        console.log('1Ô∏è‚É£ Creating Auto Agent...');
        const autoAgent = AgentFactory.createAutoAgent(config);
        console.log(`‚úÖ Auto Agent Created: ${autoAgent.constructor.name}`);
        
        // 2. ÊåáÂÆöÊµÅÂºèÊ®°Âºè
        console.log('2Ô∏è‚É£ Creating Stream Agent...');
        const streamAgent = AgentFactory.createStreamAgent(config);
        console.log(`‚úÖ Stream Agent Created: ${streamAgent.constructor.name}`);
        
        // 3. ÊåáÂÆöÂºÇÊ≠•Ê®°Âºè
        console.log('3Ô∏è‚É£ Creating Async Agent...');
        const asyncAgent = AgentFactory.createAsyncAgent(config);
        console.log(`‚úÖ Async Agent Created: ${asyncAgent.constructor.name}`);
        
        // 4. ÈÄöËøáÂ∑•ÂéÇÊñπÊ≥ïÊåáÂÆöÊ®°Âºè
        console.log('4Ô∏è‚É£ Creating Agent with explicit mode...');
        const explicitAgent = AgentFactory.createAgent({
            ...config,
            mode: AgentMode.STREAMING
        });
        console.log(`‚úÖ Explicit Agent Created: ${explicitAgent.constructor.name}`);
        
    } catch (error) {
        console.error('‚ùå Agent Creation Error:', error);
    }
}

/**
 * ÊºîÁ§∫SessionManager V2
 */
async function demonstrateSessionManagerV2(config: AgentFactoryConfig, eventBus: EventBus) {
    console.log('\nüìã Demonstrating SessionManager V2...');
    
    try {
        // ÂàõÂª∫Agent
        const agent = AgentFactory.createAutoAgent(config);
        
        // ÂàõÂª∫Ê®°ÊãüClient
        const mockClient = createMockClient();
        
        // ÂàõÂª∫SessionManager
        const sessionManager = new SessionManager(mockClient, agent, eventBus);
        console.log('‚úÖ SessionManager Created');
        
        // ÂàõÂª∫‰ºöËØù
        const sessionId = sessionManager.createSession('user123', agent.id);
        console.log(`‚úÖ Session Created: ${sessionId}`);
        
        // Ê®°Êãü‰ºöËØùÊìç‰Ωú
        await sessionManager.switchSession(sessionId);
        console.log('‚úÖ Session Switched');
        
        // Ëé∑Âèñ‰ºöËØùÁªüËÆ°
        const stats = await sessionManager.getSessionStats();
        console.log('üìä Session Stats:', stats);
        
        // Ê∏ÖÁêÜ
        sessionManager.dispose();
        console.log('‚úÖ SessionManager Disposed');
        
    } catch (error) {
        console.error('‚ùå SessionManager Demo Error:', error);
    }
}

/**
 * ÂàõÂª∫Ê®°ÊãüLLMÔºàÊîØÊåÅ‰∏§ÁßçË∞ÉÁî®Ê®°ÂºèÔºâ
 */
function createMockLLM() {
    return {
        // ÊµÅÂºèË∞ÉÁî®ÊîØÊåÅ
        async *callStream(prompt: string, toolDefs: any[], options?: any) {
            yield { type: 'step-start', stepIndex: options?.stepIndex || 0 };
            yield { type: 'text-delta', content: 'Hello ', chunkIndex: 0 };
            yield { type: 'text-delta', content: 'from ', chunkIndex: 1 };
            yield { type: 'text-delta', content: 'V2 ', chunkIndex: 2 };
            yield { type: 'text-delta', content: 'Architecture!', chunkIndex: 3 };
            yield { type: 'text-done', content: 'Hello from V2 Architecture!' };
            yield { type: 'step-complete', result: { text: 'Hello from V2 Architecture!' } };
        },
        
        // ÂºÇÊ≠•Ë∞ÉÁî®ÊîØÊåÅ
        async callAsync(prompt: string, toolDefs: any[], options?: any) {
            // Ê®°ÊãüÂºÇÊ≠•Âª∂Ëøü
            await new Promise(resolve => setTimeout(resolve, 100));
            return {
                text: 'Hello from V2 Architecture (Async)!',
                toolCalls: []
            };
        },
        
        // ÂÖ∂‰ªñÂøÖË¶ÅÂ±ûÊÄß
        modelName: 'mock-model',
        temperature: 0.7,
        maxTokens: 2048
    };
}

/**
 * ÂàõÂª∫Ê®°ÊãüClient
 */
function createMockClient() {
    return {
        name: 'MockClient',
        type: 'demo' as any,
        isConnected: true,
        
        sendMessage: async (message: string) => {
            console.log(`üì§ Client sending: ${message}`);
        },
        
        onMessage: (callback: (message: string) => void) => {
            // Ê®°ÊãüÂÆ¢Êà∑Á´ØÊ∂àÊÅØÂ§ÑÁêÜ
        },
        
        disconnect: () => {
            console.log('üì¥ Client disconnected');
        },
        
        setSessionManager: (sessionManager: any) => {
            // Ê®°ÊãüËÆæÁΩÆsession manager
        },
        
        newSession: async () => {
            return 'mock-session-id';
        },
        
        switchSession: async (sessionId: string) => {
            console.log(`üîÑ Switching to session: ${sessionId}`);
        },
        
        endSession: async () => {
            console.log('üîö Ending session');
        }
    } as any; // ‰ΩøÁî®Á±ªÂûãÊñ≠Ë®ÄÁÆÄÂåñmockÂÆûÁé∞
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§Êñá‰ª∂ÔºåÊâßË°åÊºîÁ§∫
if (import.meta.url === `file://${process.argv[1]}`) {
    demonstrateEventDrivenArchitecture()
        .then(() => {
            console.log('‚úÖ Demo completed successfully');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Demo failed:', error);
            process.exit(1);
        });
}

export { demonstrateEventDrivenArchitecture }; 